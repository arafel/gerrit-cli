#!/usr/bin/env node

var util = require("util");
var program = require("commander");
var domain = require("domain").create();
var Promise = require("bluebird");
var chalk = require("chalk");

var cli = require("../lib/cli");
var git = require("../lib/git");
var gerrit = require("../lib/gerrit");
var logger = require("../lib/logger");


/** Define Interface **/

program.command('help')
  .action(program.help.bind(program));

program.command('config [name]')
  .description("Show the server configurations for <gerrit_name>, or all configurations, or if none specified the configuration of the current project. If a configuration does not exist for the specified name you will have the option to create one.")
  .option("--all")
  .action(cli.config);

program.command('projects <name>')
  .action(cli.projects);

program.command('clone <gerrit_name> <project_name> [destination_folder]')
  .action(cli.clone);

program.command('status')
  .alias('st')
  .action(cli.status);

program.command('assign')
  .action(function() {
    cli.assign(program.args.slice(0, -1));
  });

program.command('push [base_branch]')
  .option("--assign [reviewer...]")
  .action(function(base_branch) {
    push_action('push', base_branch);
  });

program.command('draft [base_branch]')
  .option("--assign [reviewer...]")
  .action(function(base_branch) {
    push_action('draft', base_branch);
  });

function push_action(command_name, base_branch) {
  var reviewers = [];
  var is_draft = (command_name === 'draft');
  var indexOfAssignFlag = program.rawArgs.indexOf("--assign");
  if (indexOfAssignFlag !== -1) {
    reviewers = program.rawArgs.slice(indexOfAssignFlag + 1);
    base_branch = program.rawArgs[indexOfAssignFlag - 1];
    if (base_branch === command_name) {
      base_branch = undefined;
    }
  }
  cli.push(base_branch, reviewers, is_draft);
}

program.command('checkout <change_id|topic> [patch_set]')
  .alias("co")
  .action(cli.checkout);

program.command('recheckout')
  .alias("reco")
  .action(cli.recheckout);

program.command('ssh <command>')
  .action(cli.ssh);

program.command('review [verified_score] [code_review_score] [message]')
  .option("-1").option("-2") // capture these here so commander doesn't fail
  .action(function() {
    var args = program.rawArgs.slice(program.rawArgs.indexOf("review") + 1);
    cli.review.apply(null, args);
  });

program.command('submit [message]')
  .action(cli.submit);

program.command('abandon [message]')
  .action(cli.abandon);

program.command('comment <message>')
  .action(cli.comment);

program.command('pubmit [base_branch]')
  .alias('ninja')
  .action(cli.pubmit);


/** Logging and Error Handling **/

logger.on('info', console.log);

logger.on('warn', logProcess(function(line) {
  console.warn('gerrit ' + chalk.yellow("WARN") + ' ' + line);
}));

logger.on('error', logProcess(function(line) {
  console.error('gerrit ' + chalk.red("ERROR") + ' ' + line);
}));

function logProcess(lineOutputCallback) {
  return function(message, context) {
    message = message.split("\n");
    if (context) {
      for (var key in context) {
        var value = context[key];
        if (typeof value === 'object') {
          value = JSON.stringify(value);
        }
        message.push("  " + chalk.magenta(key + ':') + " " + value);
      }
    }
    message.forEach(lineOutputCallback);
  };
}

Promise.onPossiblyUnhandledRejection(function(e, promise) {
  throw e;
});

// handles exceptions, better than try/catch
// since it'll also handle those thrown from
// assynchronous calls
domain.on('error', function(err) {
  if (err instanceof git.GitError) {
    logger.error("There was an error running a git command", {
      command: err.command,
      output: err.message,
      code: err.code
    });
  }
  else if (err instanceof gerrit.GerritError) {
    logger.error(err.message);
    logger.error(err.stack.substr(err.stack.indexOf("\n") + 1));
  }
  else if (err instanceof cli.CliError) {
    logger.error(err.message);
  }
  else {
    logger.error(chalk.bgRed("UNKNOWN") + " " + err.toString(), err);
  }
});


/** Run it! **/

domain.run(function() {
  program.parse(process.argv);
});


