#!/usr/bin/env node

"use strict";

var program = require("commander");
var domain = require("domain").create();
var Q = require("bluebird");
var chalk = require("chalk");
var wrap = require("word-wrap");
var util = require("util");
var _ = require("lodash");

var cli = require("../lib/cli");
var git = require("../lib/git");
var gerrit = require("../lib/gerrit");
var logger = require("../lib/logger");

/** Define Interface **/

program.on("*", function(args) {
  logger.error(util.format("Command \"%s\" does not exist.", args[0]));
  program.help();
  process.exit(1);
});

program.command("help [command]")
  .description([
    "View help for specified command.",
    "View help for specified command."
  ])
  .action(function(name) {
    if (!name) {
      program.help();
      return;
    }
    var command = _.find(program.commands, function(cmd) {
      return cmd._name === name || cmd._alias === name;
    });
    if (command) {
      command.help();
    }
  });

program.command("config [config_name]")
  .description([
    "Manage server configurations",
    "Create a server configuration for the given config name if it does not already exist, otherwise displays the configuration values. If no config name is provided then 'default' will be used."
  ])
  .option("-a, --all", "Display all configurations.")
  .option("-e, --edit", "Edit the specified config.")
  .action(cli.config);

program.command("projects")
  .option("-c, --config <config_name>", "Specify a server config if other than 'default'.")
  .description([
    "Display available projects on server.",
    "Display a list of project names for the given config name. If no config name is provided then 'default' will be used."
  ])
  .action(cli.projects);

program.command("clone [project_name] [destination_folder]")
  .option("-c, --config <config_name>", "Specify a server config if other than 'default'.")
  .description([
    "Clone a project from server.",
    "Clones a project from the Gerrit server and installs the commit-msg hook. All parameters are optional and will be prompted if not specified."
  ])
  .action(cli.clone);

var patchesCmd = program.command("patches")
  .alias("patch")
  .alias("pa")
  .description([
    "List details of patches on the server for the current project.",
    "List details of patches on the server for the current project. Many options are available to filter and format the output. Filter options are accumulative. Each filter can be negated by prepending 'not', for example: --not-owner jsmith",
    {
      "Format": "The format is a string of tokens used to decide what fields to display. For example, `gerrit patches --format '%n %O %s'` would display a table (ie: the default display) with columns for the patch number, owner and subject in that order.\nThe default format string is '%n %t %b %ou %du %s %R'.\nSee below for the list of possible tokens:\n" +
         _.map(cli._patches_map, function(map, token) { return "%" + token + ": " + map[0]; }).join("\n")
    }
  ])
  .option("--number <number>", "Filter by patch number.").option("--not-number <number>")
  .option("--owner <name>", "Filter by patch owner.").option("--not-owner <name>")
  .option("--author <name>", "Alias for --owner.").option("--not-author <name>")
  .option("--reviewer <name>", "Filter by assigned reviewer.").option("--not-reviewer <name>")
  .option("--branch <name>", "Filter against target branch.").option("--not-branch <name>")
  .option("--topic <name>", "Filter by topic name").option("--not-topic <name>")
  .option("--message <message>", "Filter by commit message substring match.").option("--not-message <message>")
  .option("--age <age>", "Filter by amount of time since last update or comment.").option("--not-age <age>")
  .option("--drafts", "Filter by draft status.").option("--not-drafts")
  .option("--starred", "Filter by starred status.").option("--not-starred")
  .option("--watched", "Filter by watched status.").option("--not-watched")
  .option("--reviewed", "Filter on whether at least one non-zero review has been made.").option("--not-reviewed")
  .option("--assigned", "Filter on whether current user is assigned to review.").option("--not-assigned")
  .option("--mine", "Filter on whether current user is owner.").option("--not-mine")
  .option("-r, --remote <remote>", "Specify a remote.")
  .option("--table", "Display in a table. (default)")
  .option("--vertical", "Display in a vertical table.")
  .option("--oneline", "Display all patch data in a single line.")
  .option("--format <format>", "Specifies what fields in which order to display.")
  .action(cli.patches);

patchesCmd.optionHelp = function() {
  var output = program.Command.prototype.optionHelp.call(this);

  output = output.split("\n");

  _.remove(output, function(line, index) {
    return line.match(/\s*--not-/);

  });

  return output.join("\n");
};

program.command("status [what]")
  .description([
    "Show full details of a specific patch, including comments.",
    "Show full details of a specific patch, including comments. By defaut shows the status of the current patch, provide a patch number or topic to view status of a specific patch."
  ])
  .alias("st")
  .action(cli.status);

program.command("assign")
  .description([
    "Assign reviewers to the current patch.",
    "Assign reviewers to the current patch. If there are multiple commits in the topic you will need to either assign the reviewers to all of them (--all) or to choose which to assign to (--interactive)."
  ])
  .option("-a, --all", "Assign reviewers to all patches in the current topic.")
  .option("-i, --interactive", "Start interactive reviewer assigning to specify which patches in current topic.")
  .option("-r, --remote <remote>", "Specify a remote.")
  .action(function() {
    var reviewers = program.args.slice(0, -1);
    var options = arguments[arguments.length-1];
    cli.assign(reviewers, options);
  });

program.command("up")
  .description([
    "Push patches of current topic to server for review.",
    "Push patches of current topic to server for review. Uses the current branch's name as the topic and the upstream as the branch to push against.\nFor example, if you were to normally push `origin HEAD:refs/for/someBranch/myTopic` then your topic branch should be called `myTopic` and its upstream should be `origin/someBranch`."
  ])
  .option("-r, --remote <remote>", "Specify a remote.")
  .option("-b, --branch <branch>", "Specify a branch name if other than upstream.")
  .option("--draft", "Make this a draft patch. Also see `gerrit help draft`.")
  .option("--assign [reviewer...]", "Also assign specified reviewers to the patch. All words passed this option ar treated as reviewer names.")
  .action(function() {
    var options = arguments[arguments.length-1];
    push_action(options);
  });

program.command("draft")
  .description([
    "Push patches of current topic to server as drafts.",
    "Push patches of current topic to server as drafts. Uses the current branch's name as the topic and the upstream as the branch to push against.\nFor example, if you were to normally push `origin HEAD:refs/drafts/someBranch/myTopic` then your topic branch should be called `myTopic` and its upstream should be `origin/someBranch`.\nAlso sets up a guard where a subsequent `gerrit up` on the same topic will confirm with the user whether the draft status of the patches should be removed."
  ])
  .option("-r, --remote <remote>", "Specify a remote.")
  .option("-b, --branch <branch>", "Specify a branch name.")
  .option("--assign [reviewer...]", "Also assign specified reviewers to the patch. All words passed this option ar treated as reviewer names.")
  .action(function() {
    var options = arguments[arguments.length-1];
    options.draft = true;
    push_action(options);
  });

function push_action(options) {
  var reviewers = [];
  var indexOfAssignFlag = program.rawArgs.indexOf("--assign");
  if (indexOfAssignFlag !== -1) {
    reviewers = program.rawArgs.slice(indexOfAssignFlag + 1);
  }
  options.assign = reviewers;
  cli.up(options);
}

program.command("checkout <what> [patch_set]")
  .alias("co")
  .description([
    "Fetch and checkout topic branch from server.",
    "Fetch and checkout topic branch from server. You can specify either the patch number or topic. By default the latest patch set will be checked out, specify a patch set number as the last argument if a different patch set is desired."
  ])
  .option("-r, --remote <remote>", "Specify a remote.")
  .action(cli.checkout);

program.command("recheckout")
  .alias("reco")
  .description([
    "Re-checkout current topic.",
    "Re-checkout current topic. Same as `gerrit checkout <what>` where the current topic is specified."
  ])
  .option("-r, --remote <remote>", "Specify a remote.")
  .action(cli.recheckout);

program.command("ssh <command>")
  .description([
    "Run arbitrary gerrit command on server.",
    "Run arbitrary gerrit command on server. Use to build your own commands or for debugging. See available gerrit server commands at https://gerrit.googlecode.com/svn/documentation/2.2.1/cmd-index.html",

  ])
  .option("-r, --remote <remote>", "Specify a remote.")
  .action(cli.ssh);

program.command("review [verified_score] [code_review_score] [message]")
  .description([
    "Post a review for the current topic.",
    "Post a review for the current topic. Scores are specified as a number between -1 and +1 for verified, and -2 to +2 for code review. The plus sign '+' is optional. Leave out all arguments in order to be prompted for the review."
  ])
  .option("-i, --interactive", "Interactively select which patches to review if topic contains multiple patches.")
  .option("-r, --remote <remote>", "Specify a remote.")
  .option("-1").option("-2") // capture these here so commander doesn't fail
  .action(function() {
    var options = arguments[arguments.length-1];
    var args = program.rawArgs.slice(program.rawArgs.indexOf("review") + 1);

    options.options.forEach(function(opt) {
      if (_.contains(["-2", "-1"], opt.long)) {
        return;
      }
      var flagIndex = args.indexOf(opt.short);
      if (flagIndex === -1) {
        flagIndex = args.indexOf(opt.long);
      }

      if (flagIndex !== -1) {
        var numSplice = 1;
        var value = options[opt.long.substr(2)];
        if (opt.required || (opt.optional && !_.isBoolean(value))) {
          numSplice = 2;
        }
        args.splice(flagIndex, numSplice);
      }
    });

    while (args.length < 3) {
      args.push(null);
    }

    args.push(options);

    cli.review.apply(null, args);
  });

program.command("submit [message]")
  .description([
    "Submit the current topic for merging.",
    "Submit the current topic for merging, optionally including a comment message."
  ])
  .option("-a, --all", "Merge all patches if topic contains multiple patches.")
  .option("-i, --interactive", "Interactively select which patches to merge if topic contains multiple patches.")
  .option("-r, --remote <remote>", "Specify a remote.")
  .action(cli.submit);

program.command("abandon [message]")
  .description([
    "Abandon the current topic.",
    "Abandon the current topic, optionally including a comment message."
  ])
  .option("-a, --all", "Abandon all patches if topic contains multiple patches.")
  .option("-i, --interactive", "Interactively select which patches to abandon if topic contains multiple patches.")
  .option("-r, --remote <remote>", "Specify a remote.")
  .action(cli.abandon);

program.command("comment <message>")
  .description([
    "Post a comment on the current topic.",
    "Post a comment on the current topic."
  ])
  .option("-a, --all", "Post comment on all patches if topic contains multiple patches.")
  .option("-i, --interactive", "Interactively select which patches to post comment on if topic contains multiple patches.")
  .option("-r, --remote <remote>", "Specify a remote.")
  .action(cli.comment);

program.command("ninja")
  .alias("pubmit")
  .description([
    "Push patch to server then immediately submit for merging.",
    "Push patch to server then immediately submit for merging."
  ])
  .option("-a, --all", "Push and merge all patches if topic contains multiple patches.")
  .option("-r, --remote <remote>", "Specify a remote.")
  .option("-b, --branch <branch>", "Specify a branch name.")
  .action(cli.pubmit);

program.command("web")
  .description([
    "Open browser to gerrit web page for current patch.",
    "Open browser to gerrit web page for current patch."
  ])
  .option("-r, --remote <remote>", "Specify a remote.")
  .action(cli.web);

program.command("completion")
  .description([
    "Enables tab completion for gerrit-cli.",
    "Enables tab completion for gerrit-cli. Include the following line in your ~/.bashrc file:\nsource <(gerrit completion)"
  ])
  .action(cli.completion);

program.command("topic <name> [upstream]")
  .description([
    "Create new topic branch.",
    "Create new topic branch tracking the given upstream. If upstream is not specified then it will be set to current branch's upstream."
  ])
  .action(cli.topic);

/* Help */

program.Command.prototype.usage = function() {
  var usage = "";

  if (this.commands.length) {
    usage += "[command] ";
  }

  this._args.forEach(function(arg) {
    var nameOutput = arg.name + (arg.variadic === true ? "..." : "");

    nameOutput = arg.required ? "<" + nameOutput + ">" : "[" + nameOutput + "]";

    usage += nameOutput + " ";
  });

  return usage;
};

program.Command.prototype.commandHelp = function() {
  if (!this.commands.length) {
    return "";
  }

  var help = "Commands:\n\n";

  var maxWidth = this.commands.reduce(function(max, cmd) {
    return Math.max(max, cmd._name.length);
  }, 0);

  this.commands.forEach(function(cmd) {
    var spaces = new Array(maxWidth - cmd._name.length + 5).join(" ");
    var description = "";
    if (cmd._description) {
      description = cmd._description;
      if (Array.isArray(description)) {
        description = description[0];
      }
    }
    help += "  " + cmd._name + spaces + description + "\n";
  });

  return help;

};

program.Command.prototype.optionHelp = function() {
  if (!this.options.length) {
    return "";
  }

  var help = "Options:\n\n";

  var maxWidth = this.options.reduce(function(max, opt) {
    return Math.max(max, opt.flags.length);
  }, 0);

  this.options.forEach(function(opt) {
    var spaces = new Array(maxWidth - opt.flags.length + 5).join(" ");
    help += "  " + opt.flags + spaces + opt.description + "\n";
  });

  return help;
};

program.Command.prototype.additionalHelp = function() {
  if (!Array.isArray(this._description) || this._description.length < 3) {
    return "";
  }

  var help = "";

  _.forEach(this._description[2], function(content, header) {
    help += header + ":\n\n" + wrap(content, {width:80}) + "\n";
  });

  return help;
};

program.Command.prototype.helpInformation = function() {
  var help = [];

  var usage = "  " + this._name + " " + this.usage();

  help.push(
    "",
    "Usage:",
    "",
    usage
  );

  if (this._alias) {
    help.push("", "Alias: " + this._alias);
  }

  if (this._description) {
    var description = this._description;
    if (Array.isArray(description)) {
      description = description[1];
    }
    help.push(
      "",
      "Description:",
      "",
      wrap(description, {width:80})
    );
  }

  if (this.commands.length) {
    help.push("", this.commandHelp());
  }

  if (this.options.length) {
    help.push("", this.optionHelp());
  }

  if (Array.isArray(this._description) && this._description.length >= 3) {
    help.push("", this.additionalHelp());
  }

  help.push("");

  return help.join("\n");
};

/* Logging and Error Handling **/

logger.on("info", logProcess(function(line) {
  console.log(line);
}));

logger.on("warn", logProcess(function(line) {
  console.warn("gerrit " + chalk.yellow("WARN") + " " + line);
}));

logger.on("error", logProcess(function(line) {
  console.error("gerrit " + chalk.red("ERROR") + " " + line);
}));

function logProcess(lineOutputCallback) {
  return function(message, context) {
    message = message.split("\n");
    if (context) {
      for (var key in context) {
        var value = context[key];
        if (typeof value === "object") {
          value = JSON.stringify(value);
        }
        message.push("  " + chalk.magenta(key + ":") + " " + value);
      }
    }
    message.forEach(lineOutputCallback);
  };
}

Q.onPossiblyUnhandledRejection(function(e, promise) {
  throw e;
});

// handles exceptions, better than try/catch
// since it'll also handle those thrown from
// assynchronous calls
domain.on("error", function(err) {
  if (err instanceof git.GitError) {
    logger.error("There was an error running a git command", {
      command: err.command,
      output: err.output,
      error: err.error,
      code: err.code
    });
  }
  else if (err instanceof gerrit.GerritError) {
    logger.error(err.message);
    logger.error(err.stack.substr(err.stack.indexOf("\n") + 1));
  }
  else if (err instanceof cli.CliError) {
    logger.error(err.message);
  }
  else {
    logger.error(chalk.bgRed("UNKNOWN") + " " + err.toString(), err);
    logger.error(err.stack.substr(err.stack.indexOf("\n") + 1));
  }
});


/** Run it! **/

domain.run(function() {
  program.parse(process.argv);
  if (!program.args.length) {
    program.help();
  }
});


